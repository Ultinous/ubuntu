CUDA_ARCH_LIST				 = amd64
CUDA_ARCH_LIST				+= ppc64el

ifeq ($(VENDOR),Ubuntu)
CUDA_ARCH_LIST_NO_DRIVER		+= ppc64el
endif

package_libcuda1.Debian			+= libcuda1			(>= $${nvidia:MinVersion}) [!armhf !ppc64el] |
package_libcuda1.Debian			+= libnvidia-tesla-450-cuda1	(>= $${nvidia:MinVersion}) [amd64 i386 arm64 ppc64el] |
package_libcuda1.Debian			+= libnvidia-tesla-440-cuda1	(>= $${nvidia:MinVersion}) [amd64 i386 ppc64el] |

package_libcuda1.Ubuntu			+= libnvidia-compute-450	(>= $${nvidia:MinVersion}) [amd64 i386 arm64] |
package_libcuda1.Ubuntu			+= libnvidia-compute-450-server	(>= $${nvidia:MinVersion}) [amd64 i386 arm64 ppc64el] |
package_libcuda1.Ubuntu			+= libnvidia-compute-440	(>= $${nvidia:MinVersion}) [amd64 i386] |
package_libcuda1.Ubuntu			+= libnvidia-compute-440-server	(>= $${nvidia:MinVersion}) [amd64 i386 ppc64el] |

package_libnvidia-ml1.Debian		+= libnvidia-ml1		(>= $${nvidia:MinVersion}) [!armhf !ppc64el] |
package_libnvidia-ml1.Debian		+= libnvidia-tesla-450-ml1	(>= $${nvidia:MinVersion}) [amd64 i386 arm64 ppc64el] |
package_libnvidia-ml1.Debian		+= libnvidia-tesla-440-ml1	(>= $${nvidia:MinVersion}) [amd64 i386 ppc64el] |

package_libnvidia-ml1.Ubuntu		 = $(package_libcuda1.Ubuntu)

package_driver.Debian			+= nvidia-driver		(>= $${nvidia:MinVersion}) [!i386 !armhf !ppc64el] |
package_driver.Debian			+= nvidia-tesla-450-driver	(>= $${nvidia:MinVersion}) [amd64 arm64 ppc64el] |
package_driver.Debian			+= nvidia-tesla-440-driver	(>= $${nvidia:MinVersion}) [amd64 ppc64el] |

package_driver.Ubuntu			 =

CUDA_VERSION_DRIVER_MINIMAL.default	 = 440

CUDA_VERSION_DRIVER_BUNDLED.default	 = 440.33.01

CUDA_MAN_DATE.default			 = 23 Oct 2019
CUDA_MAN_DATE.ppc64el			 = 24 Oct 2019


OPENJDK_VERSION				 = 8u252-b09-1~deb9u1


NSIGHT_COMPUTE_VERSION			 = 2019.5.0
NSIGHT_COMPUTE_DESKTOP_DIR.amd64	 = linux-desktop-glibc_2_11_3-x64
NSIGHT_COMPUTE_DESKTOP_DIR.i386		 = linux-desktop-glibc_2_11_3-x86
NSIGHT_COMPUTE_DESKTOP_DIR.ppc64el	 = linux-desktop-glibc_2_19_0-ppc64le

NSIGHT_SYSTEMS_VERSION			 = 2019.5.2
NSIGHT_SYSTEMS_HOST_DIR.amd64		 = host-linux-x64

NSIGHT_SYSTEMS_TARGET_DIR.amd64		 = target-linux-x64

CUDA_WATCH_URL				 = https://developer.nvidia.com/cuda-$(CUDA_VERSION_MAJOR).$(CUDA_VERSION_MINOR)-download-archive
CUDA_WATCH_URL				 = https://developer.nvidia.com/cuda-downloads

COMPRESS_EXT				 = xz

CUDA_TAR_TYPE.default			 = repack

CUDA_DL_TYPE.default			 = run

CUDA_DL_URL_HOST			 = https://developer.download.nvidia.com
CUDA_DL_URL_PROD			 = Prod
CUDA_DL_URL_PATH.default		 = compute/cuda/$(CUDA_VERSION_MAJOR).$(CUDA_VERSION_MINOR)/$(CUDA_DL_URL_PROD)/local_installers

CUDA_DL_FILENAME_ARCH.amd64		 = linux
CUDA_DL_FILENAME_ARCH.ppc64el		 = linux_ppc64le

CUDA_DL_FILENAME.run			 = cuda_$(CUDA_VERSION_TOOLKIT)_$(call aval,CUDA_VERSION_DRIVER_BUNDLED,$1)_$(call aval,CUDA_DL_FILENAME_ARCH,$1).run

# $1 = arch
get_dl_url				 = $(CUDA_DL_URL_HOST)/$(call aval,CUDA_DL_URL_PATH,$1)/$(call get_dl_filename,$1)
get_dl_filename				 = $(or $(call CUDA_DL_FILENAME.$(call aval,CUDA_DL_TYPE,$1),$1),$(error Undefined CUDA_DL_FILENAME.$(call aval,CUDA_DL_TYPE,$1)($1)))
get_dl_type				 = $(call aval,CUDA_DL_TYPE,$1)
