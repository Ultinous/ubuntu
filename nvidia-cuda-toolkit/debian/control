Source: nvidia-cuda-toolkit
Section: non-free/libs
Priority: optional
Maintainer: Debian NVIDIA Maintainers <pkg-nvidia-devel@lists.alioth.debian.org>
Uploaders:
 Andreas Beckmann <anbe@debian.org>,
 Graham Inggs <ginggs@debian.org>,
 Kozák Miklós <garmine@ultinous.com>,
Build-Depends:
 debhelper-compat (= 12),
 dh-exec,
 quilt,
 chrpath,
 hardlink,
Build-Depends-Arch:
# for cuda-gdb
 bison,
 flex,
 libbabeltrace-dev,
 libbabeltrace-ctf-dev,
 libexpat1-dev,
 liblzma-dev,
 libncurses-dev,
 libreadline-dev,
 python3-dev,
 zlib1g-dev,
# for nsight-compute/nsight-systems
 libasound2-dev [!arm64],
 libdbus-1-3 [amd64],
 libegl1 [amd64],
 libfontconfig1 [amd64],
 libgl1 [amd64],
 libhyphen0 [amd64],
 libnss3 [amd64],
 libxcomposite1 [amd64],
 libxcursor1 [amd64],
 libxkbcommon-x11-0 [amd64],
 libxi6 [!arm64],
 libxtst6 [!arm64],
# for nvidia-openjdk-8-jre
 libfreetype6-dev [!arm64],
 libgif-dev [!arm64],
 libjpeg-dev (>= 1:0) [!arm64] | libjpeg62-dev [!arm64],
 liblcms2-dev [!arm64],
 libpulse-dev [!arm64],
 libpcsclite-dev [!arm64],
 libpng-dev [!arm64],
 libxrender-dev [!arm64],
Rules-Requires-Root: no
Standards-Version: 4.5.0
Homepage: https://developer.nvidia.com/cuda-zone
Vcs-Browser: https://salsa.debian.org/nvidia-team/nvidia-cuda-toolkit
Vcs-Git: https://salsa.debian.org/nvidia-team/nvidia-cuda-toolkit.git
XS-Autobuild: yes
X-Ultinous-Origtars: nvidia-cuda-toolkit_10.2.89.orig.tar.xz nvidia-cuda-toolkit_10.2.89.orig-amd64.tar.xz
# nvidia-cuda-toolkit_10.2.89.orig-openjdk-8-jre-amd64-8u252-b09-1-d9u1.tar.xz nvidia-cuda-toolkit_10.2.89.orig-openjdk-8-source-8u252-b09-1-d9u1.tar.xz

Package: nvidia-cuda-toolkit
Section: non-free/devel
Architecture: amd64 ppc64el
Depends:
 nvidia-profiler (= ${binary:Version}) [${cuda:arch:has-nvidia-profiler}],
 nvidia-cuda-dev (= ${binary:Version}),
 nvidia-opencl-dev (= ${binary:Version}) | opencl-dev,
 gcc-8 | clang-8 | clang-7 | gcc-7 | clang-6.0 | clang-5.0 | clang-4.0 | clang-3.9 | clang-3.8 | clang (<< 1:9~) | gcc-6 | gcc-5 | gcc-4.9 | gcc-4.8,
 g++-8 | clang-8 | clang-7 | g++-7 | clang-6.0 | clang-5.0 | clang-4.0 | clang-3.9 | clang-3.8 | clang (<< 1:9~) | g++-6 | g++-5 | g++-4.9 | g++-4.8,
 ${shlibs:Depends}, ${misc:Depends},
Recommends:
 nvidia-cuda-toolkit-doc (= ${source:Version}),
 nvidia-cuda-gdb (= ${binary:Version}),
 nvidia-visual-profiler (= ${binary:Version}) [${cuda:arch:has-nvidia-visual-profiler}],
 nsight-compute (= ${binary:Version}) [${cuda:arch:has-nsight-compute}],
 nsight-systems (= ${binary:Version}) [${cuda:arch:has-nsight-systems}],
Suggests:
 ${package:driver},
Breaks:
 nvidia-cuda-doc (<< 10.2.89-3),
Description: NVIDIA CUDA development toolkit
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 This package contains the nvcc compiler and other tools needed for building
 CUDA applications.
 .
 Running CUDA applications requires a supported NVIDIA GPU and the NVIDIA
 driver kernel module.

Package: nvidia-cuda-toolkit-gcc
Section: non-free/devel
Architecture: amd64 ppc64el
Depends:
 gcc-8,
 g++-8,
 nvidia-cuda-toolkit (= ${binary:Version}),
 ${misc:Depends},
Description: NVIDIA CUDA development toolkit (GCC compatibility)
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 This package provides the /usr/bin/cuda-gcc, /usr/bin/cuda-g++ symlinks to
 simplify building packages that need to be built with a CUDA-compatible
 compiler.

Package: nvidia-cuda-toolkit-doc
Section: non-free/doc
Architecture: all
Depends:
 libjs-html5shiv,
 libjs-jquery,
 ${misc:Depends}
Breaks:
 nvidia-cuda-doc (<< 10.2.89-3),
Replaces:
 nvidia-cuda-doc (<< 10.2.89-3),
Description: NVIDIA CUDA and OpenCL documentation
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 OpenCL (Open Computing Language) is a multi-vendor open standard for
 general-purpose parallel programming of heterogeneous systems that include
 CPUs, GPUs and other processors.
 .
 This package contains the developer documentation.

Package: nvidia-cuda-gdb
Section: non-free/devel
Architecture: amd64 ppc64el
Depends: ${shlibs:Depends}, ${misc:Depends}
Recommends: nvidia-cuda-toolkit-doc (= ${source:Version})
Description: NVIDIA CUDA Debugger (GDB)
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 This package contains the cuda-gdb debugger.

Package: nvidia-profiler
Section: non-free/devel
Architecture: amd64 ppc64el
Depends:
 libaccinj64-${cudart:SoVersion},
 libcuinj64-${cudart:SoVersion},
 ${shlibs:Depends}, ${misc:Depends}
Suggests:
 nvidia-cuda-toolkit,
Description: NVIDIA Profiler for CUDA and OpenCL
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 OpenCL (Open Computing Language) is a multi-vendor open standard for
 general-purpose parallel programming of heterogeneous systems that include
 CPUs, GPUs and other processors.
 .
 This package contains the nvprof profiler.

Package: nvidia-openjdk-8-jre
Section: non-free/java
Architecture: amd64 ppc64el
Depends:
 ${shlibs:Depends}, ${misc:Depends}
Conflicts:
 openjdk-8-jre-headless,
 openjdk-8-jre,
Replaces:
 openjdk-8-jre-headless,
 openjdk-8-jre,
Description: Obsolete OpenJDK Java runtime, for NVIDIA applications
 Full Java runtime environment - needed for executing Java GUI and Webstart
 programs, using Hotspot JIT.
 .
 This package provides OpenJDK-8 JRE binaries built on Debian for use with
 the NVIDIA CUDA Toolkit. This obsolete version is needed for
 nvidia-visual-profiler and nvidia-nsight.

Package: nvidia-visual-profiler
Section: non-free/devel
Architecture: amd64 ppc64el
Depends:
 ${jre:Depends},
 libgtk2.0-0,
 nvidia-profiler (= ${binary:Version}) [${cuda:arch:has-nvidia-profiler}],
 ${perl:Depends},
 ${shlibs:Depends}, ${misc:Depends}
Recommends: nvidia-cuda-toolkit-doc (= ${source:Version}),
Homepage: https://developer.nvidia.com/nvidia-visual-profiler
Description: NVIDIA Visual Profiler for CUDA and OpenCL
 The NVIDIA Visual Profiler is a cross-platform performance profiling tool
 that delivers developers vital feedback for optimizing CUDA C/C++ and OpenCL
 applications.

Package: nvidia-nsight
Section: non-free/devel
Architecture: amd64 ppc64el
Depends:
 ${jre:Depends},
 libgtk2.0-0,
 ${shlibs:Depends}, ${misc:Depends}
Recommends: nvidia-cuda-toolkit-doc (= ${source:Version}),
Homepage: https://developer.nvidia.com/cuda/nsight-eclipse-edition
Description: NVIDIA Nsight Eclipse Edition
 NVIDIA Nsight Eclipse Edition is a full-featured IDE powered by the Eclipse
 platform that provides an all-in-one integrated environment to edit, build,
 debug and profile CUDA-C applications.
 Nsight Eclipse Edition supports a rich set of commercial and free plugins.

Package: nsight-compute
Section: non-free/devel
Architecture: amd64 ppc64el
Depends:
 libjs-html5shiv,
 libjs-jquery,
 nsight-compute-target (= ${binary:Version}),
 ${shlibs:Depends}, ${misc:Depends}
Homepage: https://developer.nvidia.com/nsight-compute
Description: NVIDIA Nsight Compute
 NVIDIA Nsight Compute is an interactive kernel profiler for CUDA applications.
 It provides detailed performance metrics and API debugging via a user
 interface and command line tool. In addition, its baseline feature allows
 users to compare results within the tool. Nsight Compute provides a
 customizable and data-driven user interface and metric collection and can be
 extended with analysis scripts for post-processing results.

Package: nsight-compute-target
Section: non-free/devel
Architecture: amd64 ppc64el
Multi-Arch: same
Depends:
 ${shlibs:Depends}, ${misc:Depends}
Breaks:
 nsight-compute (<< 10.2.89-3),
Homepage: https://developer.nvidia.com/nsight-compute
Description: NVIDIA Nsight Compute (target specific libraries)
 NVIDIA Nsight Compute is an interactive kernel profiler for CUDA applications.
 It provides detailed performance metrics and API debugging via a user
 interface and command line tool. In addition, its baseline feature allows
 users to compare results within the tool. Nsight Compute provides a
 customizable and data-driven user interface and metric collection and can be
 extended with analysis scripts for post-processing results.
 .
 This package contains the target specific libraries.

Package: nsight-systems
Section: non-free/devel
Architecture: amd64
Depends:
 libjs-jquery,
 libjs-sphinxdoc,
 libjs-underscore,
 nsight-systems-target (= ${binary:Version}),
 ${shlibs:Depends}, ${misc:Depends}
Homepage: https://developer.nvidia.com/nsight-systems
Description: NVIDIA Nsight Systems
 NVIDIA Nsight Systems is a system-wide performance analysis tool designed to
 visualize an application’s algorithms, help you identify the largest
 opportunities to optimize, and tune to scale efficiently across any quantity
 or size of CPUs and GPUs; from large server to smallest SoCs.

Package: nsight-systems-target
Section: non-free/devel
Architecture: amd64
Multi-Arch: same
Depends:
 ${shlibs:Depends}, ${misc:Depends}
Breaks:
 nsight-systems (<< 10.2.89-3),
Homepage: https://developer.nvidia.com/nsight-systems
Description: NVIDIA Nsight Systems (target specific libraries)
 NVIDIA Nsight Systems is a system-wide performance analysis tool designed to
 visualize an application’s algorithms, help you identify the largest
 opportunities to optimize, and tune to scale efficiently across any quantity
 or size of CPUs and GPUs; from large server to smallest SoCs.
 .
 This package contains the target specific libraries.

Package: nvidia-cuda-dev
Section: non-free/libdevel
Architecture: amd64 ppc64el
Multi-Arch: same
Depends:
 libcudart${cudart:SoVersion} (= ${binary:Version}),
 libaccinj64-${cudart:SoVersion} (= ${binary:Version}) [${cuda:arch:has-nvidia-profiler}],
 libcuinj64-${cudart:SoVersion} (= ${binary:Version}) [${cuda:arch:has-nvidia-profiler}],
 libnvrtc${cudart:SoVersion} (= ${binary:Version}),
 libnvtoolsext1 (= ${binary:Version}),
# libnvvm3 (= ${binary:Version}),
 libcublas${cuda:SoVersion} (= ${binary:Version}),
 libcublaslt${cuda:SoVersion} (= ${binary:Version}),
 libnvblas${cuda:SoVersion} (= ${binary:Version}),
 libcufft${cuda:SoVersion} (= ${binary:Version}),
 libcufftw${cuda:SoVersion} (= ${binary:Version}),
 libcurand${cuda:SoVersion} (= ${binary:Version}),
 libcusolver${cuda:SoVersion} (= ${binary:Version}),
 libcusolvermg${cuda:SoVersion} (= ${binary:Version}),
 libcusparse${cuda:SoVersion} (= ${binary:Version}),
 libnppc${cuda:SoVersion} (= ${binary:Version}),
 libnppial${cuda:SoVersion} (= ${binary:Version}),
 libnppicc${cuda:SoVersion} (= ${binary:Version}),
 libnppicom${cuda:SoVersion} (= ${binary:Version}),
 libnppidei${cuda:SoVersion} (= ${binary:Version}),
 libnppif${cuda:SoVersion} (= ${binary:Version}),
 libnppig${cuda:SoVersion} (= ${binary:Version}),
 libnppim${cuda:SoVersion} (= ${binary:Version}),
 libnppist${cuda:SoVersion} (= ${binary:Version}),
 libnppisu${cuda:SoVersion} (= ${binary:Version}),
 libnppitc${cuda:SoVersion} (= ${binary:Version}),
 libnpps${cuda:SoVersion} (= ${binary:Version}),
 libnvgraph${cuda:SoVersion} (= ${binary:Version}),
 libnvjpeg${cuda:SoVersion} (= ${binary:Version}),
 libcupti-dev (= ${binary:Version}),
 libnvidia-ml-dev (= ${binary:Version}),
 libthrust-dev (>= ${thrust:Version}~),
 ${misc:Depends}
Recommends:
 ${package:libcuda1},
 libgl1-mesa-dev | libgl-dev,
 libvdpau-dev,
 libnvcuvid1,
Breaks:
 libcuda1 (<< ${nvidia:MinVersion}),
Description: NVIDIA CUDA development files
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 This package contains the development files: headers and libraries.

Package: nvidia-opencl-dev
Section: non-free/libdevel
Architecture: amd64 ppc64el
Multi-Arch: same
Depends:
 ocl-icd-opencl-dev,
 ${misc:Depends}
Recommends:
 nvidia-opencl-icd,
Breaks:
 nvidia-libopencl1 (>> 0),
Description: NVIDIA OpenCL development files
 OpenCL (Open Computing Language) is a multi-vendor open standard for
 general-purpose parallel programming of heterogeneous systems that include
 CPUs, GPUs and other processors.
 .
 This metapackage provides the development files: headers and libraries.

Package: libnvidia-ml-dev
Section: non-free/libdevel
Architecture: amd64 ppc64el
Multi-Arch: same
Depends:
 ${package:libnvidia-ml1},
 ${misc:Depends}
Breaks:
 nvidia-cuda-dev (<< 10.1.168-4~),
Replaces:
 nvidia-cuda-dev (<< 10.1.168-4~),
Homepage: https://developer.nvidia.com/nvidia-management-library-NVML
Description: NVIDIA Management Library (NVML) development files
 The NVIDIA Management Library (NVML) provides a monitoring and management API.
 It provides a direct access to the queries and commands exposed via nvidia-smi.
 .
 This package contains the header file and depends on the driver-provided
 library.

Package: libcudart10.2
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Recommends:
 ${package:libcuda1}
Provides:
 no-libcuda1 [${cuda:arch:has-no-driver}],
Description: NVIDIA CUDA Runtime Library
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 This package contains the CUDA Runtime API library for high-level CUDA
 programming, on top of the CUDA Driver API.

Package: libaccinj64-10.2
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA ACCINJ Library (64-bit)
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 ACCINJ is the OpenACC internal library for profiling.
 .
 This package contains the 64-bit ACCINJ runtime library.

Package: libcuinj64-10.2
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA CUINJ Library (64-bit)
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 CUINJ is the CUDA internal library for profiling.
 .
 This package contains the 64-bit CUINJ runtime library.

Package: libnvrtc10.2
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: CUDA Runtime Compilation (NVIDIA NVRTC Library)
 CUDA Runtime Compilation library (nvrtc) provides an API to compile
 CUDA-C++ device source code at runtime.
 .
 The resulting compiled PTX can be launched on a GPU using the CUDA
 Driver API.
 .
 This package contains the NVRTC library.

Package: libnvtoolsext1
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Homepage: https://docs.nvidia.com/gameworks/content/gameworkslibrary/nvtx/nvidia_tools_extension_library_nvtx.htm
Description: NVIDIA Tools Extension Library
 The NVIDIA Tools Extension SDK (NVTX) is a C-based API for marking events and
 ranges in your applications. Applications which integrate NVTX can use Nsight
 to capture and visualize these events and ranges.
 .
 This package contains the NVIDIA Tools Extension runtime library.

#Package: libnvvm3
#Architecture: amd64 ppc64el
#Multi-Arch: same
#Pre-Depends: ${misc:Pre-Depends}
#Depends: ${shlibs:Depends}, ${misc:Depends}
#Homepage: https://developer.nvidia.com/cuda-llvm-compiler
#Description: NVIDIA NVVM Library
# NVIDIA's CUDA Compiler (NVCC) is based on the widely used LLVM open source
# compiler infrastructure.
# .
# The NVVM library is used by NVCC to compile CUDA binary code to run on NVIDIA
# GPUs.
# .
# This package contains the NVIDIA NVVM runtime library.

Package: libcupti10.2
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Provides:
 libnvperf,
Conflicts:
 libnvperf,
Breaks:
 libcupti10.1 (<< 10.1.243-7~),
Replaces:
 libnvperf,
 libcupti10.1 (<< 10.1.243-7~),
Homepage: https://developer.nvidia.com/cuda-profiling-tools-interface
Description: NVIDIA CUDA Profiler Tools Interface runtime library
 The CUDA Profiler Tools Interface (CUPTI) enables the creation of
 profiling and tracing tools that target CUDA applications.  CUPTI
 provides a set of APIs targeted at ISVs creating profilers and other
 performance optimization tools. The CUPTI APIs are not intended to be
 used by developers in their CUDA applications.
 .
 This package contains the runtime library.

Package: libcupti-dev
Section: non-free/libdevel
Architecture: amd64 ppc64el
Multi-Arch: same
Depends:
 libcupti${cudart:SoVersion} (= ${binary:Version}),
 ${misc:Depends}
Recommends: libcupti-doc
Homepage: https://developer.nvidia.com/cuda-profiling-tools-interface
Description: NVIDIA CUDA Profiler Tools Interface development files
 The CUDA Profiler Tools Interface (CUPTI) enables the creation of
 profiling and tracing tools that target CUDA applications.  CUPTI
 provides a set of APIs targeted at ISVs creating profilers and other
 performance optimization tools. The CUPTI APIs are not intended to be
 used by developers in their CUDA applications.
 .
 This package contains the development files: headers and libraries.

Package: libcupti-doc
Section: non-free/doc
Architecture: all
Depends:
 libjs-html5shiv,
 libjs-jquery,
 ${misc:Depends}
Homepage: https://developer.nvidia.com/cuda-profiling-tools-interface
Description: NVIDIA CUDA Profiler Tools Interface documentation
 The CUDA Profiler Tools Interface (CUPTI) enables the creation of
 profiling and tracing tools that target CUDA applications.  CUPTI
 provides a set of APIs targeted at ISVs creating profilers and other
 performance optimization tools. The CUPTI APIs are not intended to be
 used by developers in their CUDA applications.
 .
 This package contains the documentation and examples.

Package: libcublas10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA cuBLAS Library
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 The cuBLAS library is an implementation of BLAS (Basic Linear Algebra
 Subprograms) on top of the NVIDIA CUDA runtime. It allows the user to access
 the computational resources of NVIDIA Graphics Processing Unit (GPU), but
 does not auto-parallelize across multiple GPUs.
 .
 This package contains the cuBLAS runtime library.

Package: libcublaslt10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA cuBLASLt Library
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 The cuBLASLt library is a lightweight GEMM library with a flexible API and
 tensor core support for INT8 inputs and FP16 CGEMM split-complex matrix
 multiplication.
 .
 This package contains the cuBLASLt runtime library.

Package: libnvblas10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVBLAS runtime library
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 The NVBLAS Library is a GPU-accelerated Library that implements BLAS (Basic
 Linear Algebra Subprograms). It can accelerate most BLAS Level-3 routines by
 dynamically routing BLAS calls to one or more NVIDIA GPUs present in the
 system, when the characteristics of the call make it to speedup on a GPU.

Package: libcufft10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA cuFFT Library
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 The FFT is a divide-and-conquer algorithm for efficiently computing discrete
 Fourier transforms of complex or real-valued data sets. It is one of the most
 important and widely used numerical algorithms in computational physics and
 general signal processing. The cuFFT library provides a simple interface for
 computing FFTs on an NVIDIA GPU, which allows users to quickly leverage the
 floating-point power and parallelism of the GPU in a highly optimized and
 tested FFT library.
 .
 This package contains the cuFFT runtime library.

Package: libcufftw10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA cuFFTW Library
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 The FFT is a divide-and-conquer algorithm for efficiently computing discrete
 Fourier transforms of complex or real-valued data sets. It is one of the most
 important and widely used numerical algorithms in computational physics and
 general signal processing. The cuFFT library provides a simple interface for
 computing FFTs on an NVIDIA GPU, which allows users to quickly leverage the
 floating-point power and parallelism of the GPU in a highly optimized and
 tested FFT library.
 .
 This package contains the cuFFTW runtime library.

Package: libcurand10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA cuRAND Library
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 The cuRAND library provides facilities that focus on the simple and efficient
 generation of high-quality pseudorandom and quasirandom numbers.
 A pseudorandom sequence of numbers satisfies most of the statistical
 properties of a truly random sequence but is generated by a deterministic
 algorithm. A quasirandom sequence of n-dimensional points is generated by a
 deterministic algorithm designed to fill an n-dimensional space evenly.
 .
 This package contains the cuRAND runtime library.

Package: libcusolver10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA cuSOLVER Library
 The cuSOLVER library contains LAPACK-like functions in dense and sparse
 linear algebra, including linear solver, least-square solver and eigenvalue
 solver.
 .
 This package contains the cuSOLVER runtime library.

Package: libcusolvermg10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA cuSOLVERmg Library
 The cuSOLVER library contains LAPACK-like functions in dense and sparse
 linear algebra, including linear solver, least-square solver and eigenvalue
 solver.
 .
 This package contains the cuSOLVERmg runtime library.

Package: libcusparse10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA cuSPARSE Library
 The Compute Unified Device Architecture (CUDA) enables NVIDIA
 graphics processing units (GPUs) to be used for massively parallel
 general purpose computation.
 .
 The cuSPARSE library contains a set of basic linear algebra subroutines used
 for handling sparse matrices. It is implemented on top of the NVIDIA CUDA
 runtime and is designed to be called from C and C++. The library routines can
 be classified into four categories:
  * Level 1: operations between a vector in sparse format and a vector in dense
 format
  * Level 2: operations between a matrix in sparse format and a vector in dense
 format
  * Level 3: operations between a matrix in sparse format and a set of vectors
 in dense format
  * Conversion: operations that allow conversion between different matrix
 formats
 .
 This package contains the cuSPARSE runtime library.

Package: libnppc10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Conflicts:
 nvidia-libopencl1,
Breaks:
 nvidia-opencl-dev (<< 9.1.85-6),
Homepage: https://developer.nvidia.com/npp
Description: NVIDIA Performance Primitives core runtime library
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.  The initial set offunctionality in the library focuses on imaging
 and video processing and is widely applicable for developers in these areas.
 NPP will evolve over time to encompass more of the compute heavy tasks in a
 variety of problem domains.  The NPP library is written to maximize
 flexibility, while maintaining high performance.
 .
 This package contains the NVIDIA Performance Primitives core runtime library.

Package: libnppial10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Arithmetic and Logic
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Arithmetic and Logic operations, which is a sub-library of nppi.

Package: libnppicc10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Color Conversion
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Color and sampling Conversion, which is a sub-library of nppi.

Package: libnppicom10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Compression
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Compression, which is a sub-library of nppi.

Package: libnppidei10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Data Exchange and Initialization
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Data Exchange and Initialization, which is a sub-library of nppi.

Package: libnppif10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Filters
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Filters, which is a sub-library of nppi.

Package: libnppig10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Geometry transforms
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Geometry transforms, which is a sub-library of nppi.

Package: libnppim10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Morphological operations
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Morphological operations, which is a sub-library of nppi.

Package: libnppist10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Statistics
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Statistics and Linear Transformation, which is a sub-library of nppi.

Package: libnppisu10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Support
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Support, which is a sub-library of nppi.

Package: libnppitc10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Performance Primitives lib for Image Threshold and Compare
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 Image Threshold and Compare, which is a sub-library of nppi.

Package: libnpps10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Homepage: https://developer.nvidia.com/npp
Description: NVIDIA Performance Primitives for signal processing runtime library
 NVIDIA NPP is a library of functions for performing CUDA accelerated
 processing.  The initial set offunctionality in the library focuses on imaging
 and video processing and is widely applicable for developers in these areas.
 NPP will evolve over time to encompass more of the compute heavy tasks in a
 variety of problem domains.  The NPP library is written to maximize
 flexibility, while maintaining high performance.
 .
 This package contains the NVIDIA Performance Primitives runtime library for
 signal processing.

Package: libnvgraph10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA Graph Analytics library (nvGRAPH)
 The NVIDIA Graph Analytics library (nvGRAPH) comprises of parallel
 algorithms for high performance analytics on graphs with up to 2 billion
 edges. nvGRAPH makes it possible to build interactive and high throughput
 graph analytics applications.
 .
 nvGRAPH supports three widely-used algorithms:
  * [Page Rank] is most famously used in search engines, and also used in
    social network analysis, recommendation systems, and for novel uses
    in natural science when studying the relationship between proteins
    and in ecological networks.
  * [Single Source Shortest Path] is used to identify the fastest path from
    A to B through a road network, and can also be used for a optimizing
    a wide range of other logistics problems.
  * [Single Source Widest Path] is used in domains like IP traffic routing
    and traffic-sensitive path planning.
 .
 In addition, the nvGRAPH semi-ring SPMV operations can be used to build
 a wide range of innovative graph traversal algorithms.
 .
 nvGRAPH accelerates analysis of large graphs by making efficient use of
 the massive parallelism available in NVIDIA Tesla GPUs. The size of a
 graph in memory is dominated by the number of edges.
 An M40 with 24 GB can support a graph of up to 2 billion edges.

Package: libnvjpeg10
Architecture: amd64 ppc64el
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: NVIDIA JPEG library (nvJPEG)
 The nvJPEG 1.0 library provides high-performance, GPU accelerated JPEG
 decoding functionality for image formats commonly used in deep learning and
 hyperscale multimedia applications. The library offers single and batched JPEG
 decoding capabilities which efficiently utilize the available GPU resources
 for optimum performance; and the flexibility for users to manage the memory
 allocation needed for decoding.
